class Solution {
    // Function to find the smallest window in the string s consisting
    // of all the characters of string p.
    public static String smallestWindow(String s1, String s2) {
        // Your code here
         if (s1.length() < s2.length()) return ""; 

        Map<Character, Integer> s2Freq = new HashMap<>();
        for (char c : s2.toCharArray()) {
            s2Freq.put(c, s2Freq.getOrDefault(c, 0) + 1);
        }

        int left = 0, right = 0, matched = 0, minStart = 0, minLen = Integer.MAX_VALUE;
        Map<Character, Integer> windowFreq = new HashMap<>();

        while (right < s1.length()) {
            char rightChar = s1.charAt(right);
            windowFreq.put(rightChar, windowFreq.getOrDefault(rightChar, 0) + 1);

            if (s2Freq.containsKey(rightChar) && windowFreq.get(rightChar) <= s2Freq.get(rightChar)) {
                matched++;
            }

            while (matched == s2.length()) {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    minStart = left;
                }

                char leftChar = s1.charAt(left);
                windowFreq.put(leftChar, windowFreq.get(leftChar) - 1);
                if (s2Freq.containsKey(leftChar) && windowFreq.get(leftChar) < s2Freq.get(leftChar)) {
                    matched--;
                }
                left++;
            }
            right++;
        }

        return minLen == Integer.MAX_VALUE ? "" : s1.substring(minStart, minStart + minLen);
    }
        
    }
