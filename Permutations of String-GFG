class Solution {
    public ArrayList<String> findPermutation(String s) {
        // Code here
        ArrayList<String> result=new ArrayList<>();
        boolean[] visited=new boolean [s.length()];
        char[] chars=s.toCharArray();
        Arrays.sort(chars);
        backtrack(chars, new StringBuilder(), visited, result);
        return result;
        
    }
    private void backtrack(char[] chars, StringBuilder path,boolean[] visited, ArrayList<String> result)
    {
        if(path.length()==chars.length){
            result.add(path.toString());
            return;
        }
        for(int i=0;i<chars.length;i++){
            if(visited[i]) continue;
            if(i>0 && chars[i]==chars[i-1] && !visited[i-1]) continue;
            visited[i]=true;
            path.append(chars[i]);
            backtrack(chars,path,visited, result);
            path.deleteCharAt(path.length()-1);
            visited[i]=false;
        }
    }
}
